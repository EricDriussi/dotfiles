[["%",{"text":"profile-view.page.ts","registerMode":0}],["/",{"text":"export","registerMode":0}],["\"",{"text":"userList","registerMode":1}],["0",{"text":"import { Injectable, NgZone } from '@angular/core';\nimport { auth } from 'firebase/app';\nimport { User } from \"./user\";\nimport { Router } from \"@angular/router\";\nimport { AngularFireAuth } from \"@angular/fire/auth\";\nimport { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';\n'/home/eric/Documents/ionic/ionic-firebase-authentication/node_modules/firebase/index';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthenticationService {\n  userData: any;\n\n  constructor(\n    public afStore: AngularFirestore,\n    public ngFireAuth: AngularFireAuth,\n    public router: Router,  \n    public ngZone: NgZone \n  ) {\n    this.ngFireAuth.authState.subscribe(user => {\n      if (user) {\n        this.userData = user;\n        localStorage.setItem('user', JSON.stringify(this.userData));\n        JSON.parse(localStorage.getItem('user'));\n      } else {\n        localStorage.setItem('user', null);\n        JSON.parse(localStorage.getItem('user'));\n      }\n    })\n  }\n\n  // Login in with email/password\n  SignIn(email, password) {\n    return this.ngFireAuth.auth.signInWithEmailAndPassword(email, password)\n  }\n\n  // Register user with email/password\n  RegisterUser(email, password) {\n    return this.ngFireAuth.auth.createUserWithEmailAndPassword(email, password)\n  }\n\n  // Email verification when new user register\n  SendVerificationMail() {\n    return this.ngFireAuth.auth.currentUser.sendEmailVerification()\n    .then(() => {\n      this.router.navigate(['verify-email']);\n    })\n  }\n\n  // Recover password\n  PasswordRecover(passwordResetEmail) {\n    return this.ngFireAuth.auth.sendPasswordResetEmail(passwordResetEmail)\n    .then(() => {\n      window.alert('Password reset email has been sent, please check your inbox.');\n    }).catch((error) => {\n      window.alert(error)\n    })\n  }\n\n  // Returns true when user is looged in\n  get isLoggedIn(): boolean {\n    const user = JSON.parse(localStorage.getItem('user'));\n    return (user !== null && user.emailVerified !== false) ? true : false;\n  }\n\n  // Returns true when user's email is verified\n  get isEmailVerified(): boolean {\n    const user = JSON.parse(localStorage.getItem('user'));\n    return (user.emailVerified !== false) ? true : false;\n  }\n\n  // Sign in with Gmail\n  GoogleAuth() {\n    return this.AuthLogin(new auth.GoogleAuthProvider());\n  }\n\n  // Auth providers\n  AuthLogin(provider) {\n    return this.ngFireAuth.auth.signInWithPopup(provider)\n    .then((result) => {\n       this.ngZone.run(() => {\n          this.router.navigate(['dashboard']);\n        })\n      this.SetUserData(result.user);\n    }).catch((error) => {\n      window.alert(error)\n    })\n  }\n\n  // Store user in localStorage\n  SetUserData(user) {\n    const userRef: AngularFirestoreDocument<any> = this.afStore.doc(`users/${user.uid}`);\n    const userData: User = {\n      uid: user.uid,\n      email: user.email,\n      displayName: user.displayName,\n      photoURL: user.photoURL,\n      emailVerified: user.emailVerified\n    }\n    return userRef.set(userData, {\n      merge: true\n    })\n  }\n\n  // Sign-out \n  SignOut() {\n    return this.ngFireAuth.auth.signOut().then(() => {\n      localStorage.removeItem('user');\n      this.router.navigate(['login']);\n    })\n  }\n\n}","registerMode":2}]]